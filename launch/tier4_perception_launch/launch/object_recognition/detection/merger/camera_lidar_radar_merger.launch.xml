<?xml version="1.0"?>
<launch>
  <!-- Merger parameters -->
  <arg name="output/objects" default="objects"/>

  <arg name="objects_validation_method" default="obstacle_pointcloud"/>
  <arg name="objects_filter_method" default="lanelet_filter"/>
  <arg name="object_recognition_detection_object_merger_data_association_matrix_param_path" default="$(find-pkg-share object_merger)/config/data_association_matrix.param.yaml"/>
  <arg name="object_recognition_detection_object_merger_distance_threshold_list_path" default="$(find-pkg-share object_merger)/config/overlapped_judge.param.yaml"/>

  <arg name="use_object_filter" default="true" description="use object filter"/>
  <arg name="use_validator" default="true" description="use obstacle_pointcloud based validator"/>
  <arg name="use_near_radar_fusion" default="false"/>
  <arg name="far_object_merger_sync_queue_size" default="20"/>

  <!-- Filter output name. Switch output topic name by 'use_radar_tracking_fusion' parameter defined in perception.launch -->
  <let name="output_of_filtered_objects" value="$(var output/objects)" if="$(var use_radar_tracking_fusion)"/>
  <let name="output_of_filtered_objects" value="near_objects" unless="$(var use_radar_tracking_fusion)"/>

  <!-- Lidar parameters -->
  <arg name="lidar_detection_model"/>
  <arg name="use_pointcloud_map"/>

  <!-- Radar fusion -->
  <group>
    <include file="$(find-pkg-share radar_fusion_to_detected_object)/launch/radar_object_fusion_to_detected_object.launch.xml" if="$(var use_near_radar_fusion)">
      <arg name="input/objects" value="$(var lidar_detection_model)/objects"/>
      <arg name="input/radars" value="radar/noise_filtered_objects"/>
      <arg name="output/objects" value="radar_fusion/objects"/>
    </include>
  </group>

  <!-- Camera late fusion -->
  <group>
    <let name="target_objects" value="radar_fusion/objects" if="$(var use_near_radar_fusion)"/>
    <let name="target_objects" value="$(var lidar_detection_model)/objects" unless="$(var use_near_radar_fusion)"/>
    <include file="$(find-pkg-share image_projection_based_fusion)/launch/roi_detected_object_fusion.launch.xml">
      <arg name="input/camera_info0" value="$(var camera_info0)"/>
      <arg name="input/rois0" value="$(var detection_rois0)"/>
      <arg name="input/camera_info1" value="$(var camera_info1)"/>
      <arg name="input/rois1" value="$(var detection_rois1)"/>
      <arg name="input/camera_info2" value="$(var camera_info2)"/>
      <arg name="input/rois2" value="$(var detection_rois2)"/>
      <arg name="input/camera_info3" value="$(var camera_info3)"/>
      <arg name="input/rois3" value="$(var detection_rois3)"/>
      <arg name="input/camera_info4" value="$(var camera_info4)"/>
      <arg name="input/rois4" value="$(var detection_rois4)"/>
      <arg name="input/camera_info5" value="$(var camera_info5)"/>
      <arg name="input/rois5" value="$(var detection_rois5)"/>
      <arg name="input/camera_info6" value="$(var camera_info6)"/>
      <arg name="input/rois6" value="$(var detection_rois6)"/>
      <arg name="input/camera_info7" value="$(var camera_info7)"/>
      <arg name="input/rois7" value="$(var detection_rois7)"/>
      <arg name="input/rois_number" value="$(var image_number)"/>
      <arg name="input/image0" value="$(var image_raw0)"/>
      <arg name="input/image1" value="$(var image_raw1)"/>
      <arg name="input/image2" value="$(var image_raw2)"/>
      <arg name="input/image3" value="$(var image_raw3)"/>
      <arg name="input/image4" value="$(var image_raw4)"/>
      <arg name="input/image5" value="$(var image_raw5)"/>
      <arg name="input/image6" value="$(var image_raw6)"/>
      <arg name="input/image7" value="$(var image_raw7)"/>
      <arg name="input/objects" value="$(var target_objects)"/>
      <arg name="output/objects" value="$(var lidar_detection_model)/roi_fusion/objects"/>
      <arg name="param_path" value="$(var roi_detected_object_fusion_param_path)"/>
    </include>
  </group>

  <!-- Validator -->
  <group if="$(eval &quot;'$(var objects_validation_method)'=='obstacle_pointcloud'&quot;)">
    <let name="validator/input/obstacle_pointcloud" value="/perception/object_recognition/detection/pointcloud_map_filtered/pointcloud" if="$(var use_pointcloud_map)"/>
    <let name="validator/input/obstacle_pointcloud" value="$(var input/obstacle_segmentation/pointcloud)" unless="$(var use_pointcloud_map)"/>
    <include file="$(find-pkg-share detected_object_validation)/launch/obstacle_pointcloud_based_validator.launch.xml" if="$(var use_validator)">
      <arg name="input/detected_objects" value="$(var lidar_detection_model)/roi_fusion/objects"/>
      <arg name="input/obstacle_pointcloud" value="$(var validator/input/obstacle_pointcloud)"/>
      <arg name="output/objects" value="$(var lidar_detection_model)/validation/objects"/>
      <arg name="obstacle_pointcloud_based_validator_param_path" value="$(var object_recognition_detection_obstacle_pointcloud_based_validator_param_path)"/>
    </include>
  </group>

  <group if="$(eval &quot;'$(var objects_validation_method)'=='occupancy_grid'&quot;)">
    <include file="$(find-pkg-share detected_object_validation)/launch/occupancy_grid_based_validator.launch.xml" if="$(var use_validator)">
      <arg name="input/detected_objects" value="$(var lidar_detection_model)/objects"/>
      <arg name="output/objects" value="$(var lidar_detection_model)/validation/objects"/>
    </include>
  </group>

  <!-- Merger -->
  <group>
    <!-- 1st merger to merge camera_lidar_fusion + ML lidar detection-->
    <let name="merger/input/objects" value="$(var lidar_detection_model)/validation/objects" if="$(var use_validator)"/>
    <let name="merger/input/objects" value="$(var lidar_detection_model)/objects" unless="$(var use_validator)"/>
    <let name="without_dbt_and_filter" value="$(eval &quot;'$(var use_detection_by_tracker)'=='false' and '$(var use_object_filter)'=='false' &quot;)"/>
    <let name="merger/output/objects" value="near_objects" if="$(var without_dbt_and_filter)"/>
    <let name="merger/output/objects" value="$(var lidar_detection_model)_roi_cluster_fusion/objects" unless="$(var without_dbt_and_filter)"/>
    <include file="$(find-pkg-share object_merger)/launch/object_association_merger.launch.xml">
      <arg name="input/object0" value="$(var merger/input/objects)"/>
      <arg name="input/object1" value="clustering/camera_lidar_fusion/objects"/>
      <arg name="output/object" value="$(var merger/output/objects)"/>
      <arg name="priority_mode" value="0"/>
      <arg name="data_association_matrix_path" value="$(var object_recognition_detection_object_merger_data_association_matrix_param_path)"/>
      <arg name="distance_threshold_list_path" value="$(var object_recognition_detection_object_merger_distance_threshold_list_path)"/>
    </include>
  </group>

  <group if="$(var use_detection_by_tracker)">
    <!-- 2nd merger to merge detection_by_tracker -->
    <let name="merger/output/objects" value="objects_before_filter" if="$(var use_object_filter)"/>
    <let name="merger/output/objects" value="near_objects" unless="$(var use_object_filter)"/>
    <include file="$(find-pkg-share object_merger)/launch/object_association_merger.launch.xml">
      <arg name="input/object0" value="$(var lidar_detection_model)_roi_cluster_fusion/objects"/>
      <arg name="input/object1" value="detection_by_tracker/objects"/>
      <arg name="priority_mode" value="0"/>
      <arg name="output/object" value="$(var merger/output/objects)"/>
      <arg name="data_association_matrix_path" value="$(var object_recognition_detection_object_merger_data_association_matrix_param_path)"/>
      <arg name="distance_threshold_list_path" value="$(var object_recognition_detection_object_merger_distance_threshold_list_path)"/>
    </include>
  </group>

  <!-- Filter -->
  <group if="$(eval &quot;'$(var objects_filter_method)'=='lanelet_filter'&quot;)">
    <let name="filter/input/objects" value="objects_before_filter" if="$(var use_detection_by_tracker)"/>
    <let name="filter/input/objects" value="$(var lidar_detection_model)_roi_cluster_fusion/objects" unless="$(var use_detection_by_tracker)"/>
    <include file="$(find-pkg-share detected_object_validation)/launch/object_lanelet_filter.launch.xml" if="$(var use_object_filter)">
      <arg name="input/object" value="$(var filter/input/objects)"/>
      <arg name="output/object" value="$(var output_of_filtered_objects)"/>
      <arg name="filtering_range_param" value="$(var object_recognition_detection_object_lanelet_filter_param_path)"/>
    </include>
  </group>

  <group if="$(eval &quot;'$(var objects_filter_method)'=='position_filter'&quot;)">
    <let name="filter/input/objects" value="objects_before_filter" if="$(var use_detection_by_tracker)"/>
    <let name="filter/input/objects" value="$(var lidar_detection_model)_roi_cluster_fusion/objects" unless="$(var use_detection_by_tracker)"/>
    <include file="$(find-pkg-share detected_object_validation)/launch/object_position_filter.launch.xml" if="$(var use_object_filter)">
      <arg name="input/object" value="$(var filter/input/objects)"/>
      <arg name="output/object" value="$(var output_of_filtered_objects)"/>
      <arg name="filtering_range_param" value="$(var object_recognition_detection_object_position_filter_param_path)"/>
    </include>
  </group>

  <!-- Merge far_objects and near_objects in detection stage.
      Control parameter 'use_radar_tracking_fusion' should defined in perception.launch.xml -->
  <group unless="$(var use_radar_tracking_fusion)">
    <include file="$(find-pkg-share object_merger)/launch/object_association_merger.launch.xml">
      <arg name="input/object0" value="near_objects"/>
      <arg name="input/object1" value="radar/far_objects"/>
      <arg name="output/object" value="$(var output/objects)"/>
      <arg name="priority_mode" value="0"/>
      <arg name="data_association_matrix_path" value="$(var object_recognition_detection_object_merger_data_association_matrix_param_path)"/>
      <arg name="distance_threshold_list_path" value="$(var object_recognition_detection_object_merger_distance_threshold_list_path)"/>
      <arg name="sync_queue_size" value="$(var far_object_merger_sync_queue_size)"/>
    </include>
  </group>
</launch>
